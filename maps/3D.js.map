{"version":3,"sources":["3D.coffee"],"names":[],"mappings":"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","file":"3D.js","sourceRoot":"/source/","sourcesContent":["define ['jquery', 'three', 'CellStates', 'orbit'], ($, Three, CellStates) ->\n  $window = $ window\n  $canvas = $ 'canvas'\n\n  SCENE = null\n  CAMERA = null\n  CONTROLS = null\n  CAMERA_FOV = 45\n  BOARD = null\n  GEOMETRY = null\n  MATERIALS = {}\n  RENDERER = null\n  PROJECTOR = null\n\n  noWebGL = not window.WebGLRenderingContext\n\n  explode = 1\n  zoom = 1\n  animationQueue = []\n\n  addCubes = ->\n    for n in [4**3 - 1..0]\n      cube = new THREE.Mesh(GEOMETRY, MATERIALS.default)\n      BOARD.add cube\n\n  setExplode = (newExplode) ->\n    if newExplode > 5\n      newExplode = 5\n    if newExplode < 1\n      newExplode = 1\n    explode = newExplode\n    for n in [4**3 - 1..0]\n      cube = BOARD.children[n]\n      cube.position.setX (-1.5 + Math.floor(n / 16)) * explode\n      cube.position.setY (-1.5 + Math.floor((n % 16) / 4)) * explode\n      cube.position.setZ (-1.5 + (n % 4)) * explode\n\n  setZoom = (newZoom) ->\n    debugger\n    zoom = newZoom\n    fov = CAMERA_FOV * (1 / zoom)\n    if fov > 180\n      fov = 180\n    if fov < 0\n      fov = 0\n    CAMERA.fov = fov\n    CAMERA.updateProjectionMatrix()\n\n  setCellState = (cell, state) ->\n    BOARD.children[cell].material = MATERIALS[state]\n\n  getCellState = (cell) ->\n    state = Object.keys(CellStates)\n      .map (CellState) ->\n        CellStates[CellState]\n      .filter (CellState) ->\n        BOARD.children[cell].material is MATERIALS[CellState]\n    state[0]\n\n  initialiseBoard = ->\n    SCENE = new Three.Scene()\n\n    BOARD = new Three.Object3D()\n    BOARD.rotation.z = Math.PI / 2\n    BOARD.rotation.x = Math.PI / 6\n    BOARD.rotation.y = -Math.PI / 4\n    SCENE.add BOARD\n\n    light1 = new Three.PointLight(0xFFEEAA, 0.5)\n    light1.position = new Three.Vector3(-40, 40, -40)\n    SCENE.add light1\n\n    light2 = new Three.PointLight(0xFFEEAA, 0.5)\n    light2.position = new Three.Vector3(40, 40, 40)\n    SCENE.add light2\n\n    GEOMETRY = new Three.BoxGeometry(1, 1, 1)\n    MATERIALS[CellStates.DEFAULT] = new Three.MeshBasicMaterial(color: 0xAAAAAA, opacity : 0.25, depthTest : no, transparent: yes)\n    MATERIALS[CellStates.POSSIBLE_MOVE] = new Three.MeshBasicMaterial(color: 0xFF0000, opacity : 0.25, depthTest : no, transparent: yes)\n    MATERIALS[CellStates.TENTATIVE_MOVE] = new Three.MeshBasicMaterial(color: 0xFF0000, opacity : 0.50, depthTest : no, transparent: yes)\n    MATERIALS[CellStates.PLAYER_MOVE] = new Three.MeshBasicMaterial(color: 0xFF0000, opacity : 0.75, depthTest : no, transparent: yes)\n    MATERIALS[CellStates.COMPUTER_MOVE] = new Three.MeshBasicMaterial(color: 0x0000FF, opacity : 0.75, depthTest : no, transparent: yes)\n    MATERIALS[CellStates.COMPUTER_LAST_MOVE] = new Three.MeshBasicMaterial(color: 0xAAAAFF, opacity : 0.75, depthTest : no, transparent: yes)\n    MATERIALS[CellStates.WIN] = new Three.MeshBasicMaterial(color: 0x00FF00, opacity : 0.75, depthTest : no, transparent: yes)\n\n    if noWebGL\n      RENDERER = new Three.CanvasRenderer(canvas: $canvas.get(0), antialias: yes, alpha: yes)\n    else\n      RENDERER = new Three.WebGLRenderer(canvas: $canvas.get(0), antialias: yes, alpha: yes)\n\n    RENDERER.setSize $window.width(), $window.height()\n    RENDERER.setClearColor 0xFFFFFF, 1\n\n    CAMERA = new Three.PerspectiveCamera(CAMERA_FOV, $window.width() / $window.height(), 0.1, 400)\n    CAMERA.position.z = 12\n    SCENE.add CAMERA\n\n    CONTROLS = new Three.OrbitControls(CAMERA, $canvas.get(0))\n    CONTROLS.noPan = true\n    CONTROLS.noZoom = true\n\n    PROJECTOR = new THREE.Projector()\n\n    addCubes()\n    setExplode 1\n    setZoom 1\n\n  rafLoop = ->\n    requestAnimationFrame rafLoop\n    if animationQueue.length\n      animationQueue.shift()()\n    RENDERER.render SCENE, CAMERA\n\n  resize = ->\n    CAMERA.aspect = $window.width() / $window.height()\n    CAMERA.updateProjectionMatrix()\n    RENDERER.setSize $window.width(), $window.height()\n\n  intersect = (e) ->\n    $target = $ e.target\n    x = (e.offsetX / $target.width()) * 2 - 1\n    y = -(e.offsetY / $target.height()) * 2 + 1\n    mouse3D = new THREE.Vector3(x, y, 0.5)\n    raycaster = PROJECTOR.pickingRay mouse3D.clone(), CAMERA\n    intersections = raycaster.intersectObjects BOARD.children\n\n  getMove = (e) ->\n    intersections = intersect e\n    intersection = intersections[0]\n    if intersection\n      BOARD.children.indexOf intersection.object\n\n  resetView = ->\n    CONTROLS.reset()\n    animationQueue = []\n    setExplode 1\n    setZoom 1\n\n  resetBoard = ->\n    setCellState cell, CellStates.DEFAULT for cell in [0...4**3]\n    resetView()\n\n  createAnimation = (func, start, end, steps) ->\n    if animationQueue.length > 0\n      animationQueue[animationQueue.length - 1]()\n    animationQueue = []\n    for n in [0...steps]\n      step = n / (steps - 1)\n      animationQueue.push func.bind null, (1 - step) * start + step * end\n\n  increaseExplode = ->\n    createAnimation setExplode, explode, explode + 1, 15\n\n  decreaseExplode = ->\n    createAnimation setExplode, explode, explode - 1, 15\n\n  increaseZoom = ->\n    createAnimation setZoom, zoom, zoom * 1.2, 15\n\n  decreaseZoom = ->\n    createAnimation setZoom, zoom, zoom * 0.8, 15\n\n  $ ->\n    $window.on 'resize', resize\n    initialiseBoard()\n    resize()\n    rafLoop()\n\n  { noWebGL, setCellState, getCellState, getMove, resetView, resetBoard, increaseExplode, decreaseExplode, increaseZoom, decreaseZoom }\n"]}