{"version":3,"sources":["AI.coffee"],"names":[],"mappings":"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","file":"AI.js","sourceRoot":"/source/","sourcesContent":["define ->\n  N = 63\n           # X DIRECTION\n  lines = [[0,1,2,3], [4,5,6,7], [8,9,10,11], [12,13,14,15], #0, 1, 2, 3\n           [16,17,18,19], [20,21,22,23], [24,25,26,27], [28,29,30,31], #4, 5, 6, 7\n           [32,33,34,35], [36,37,38,39], [40,41,42,43], [44,45,46,47], #8, 9, 10, 11\n           [48,49,50,51], [52,53,54,55], [56,57,58,59], [60,61,62,63], #12, 13, 14, 15\n           #Y DIRECTION\n           [0,4,8,12], [1,5,9,13], [2,6,10,14], [3,7,11,15], #16, 17, 18, 19\n           [16,20,24,28], [17,21,25,29], [18,22,26,30], [19,23,27,31], #20, 21, 22, 23\n           [32,36,40,44], [33,37,41,45], [34,38,42,46], [35,39,43,47], #24, 25, 26, 27\n           [48,52,56,60], [49,53,57,61], [50,54,58,62], [51,55,59,63], #28, 29, 30, 31\n           #Z DIRECTION\n           [0,16,32,48], [1,17,33,49], [2,18,34,50], [3,19,35,51], # 32, 33, 34, 35\n           [4,20,36,52], [5,21,37,53], [6,22,38,54], [7,23,39,55], #36, 37, 38, 39\n           [8,24,40,56], [9,25,41,57], [10,26,42,58], [11,27,43,59], #40, 41, 42, 43\n           [12,28,44,60], [13,29,45,61], [14,30,46,62], [15,31,47,63] #44, 45, 46, 47\n           #XY DIRECTION\n           [0,5,10,15], [16,21,26,31], [32,37,42,47], [48,53,58,63], #48, 49, 50, 51\n           [3,6,9,12], [19,22,25,28], [35,38,41,44],  [51,54,57,60], #52, 53, 54, 55\n           #XZ DIRECTION\n           [0,20,40,60], [1,21,41,61], [2,22,42,62], [3,23,43,63], #56, 57, 58, 59\n           [12,24,36,48], [13,25,37,49], [14,26,38,50], [15,27,39,51] #60, 61, 62, 63\n           #YZ DIRECTION\n           [0,17,34,51], [4,21,38,55], [8,25,42,59], [12,29,46,63], #64, 65, 66, 67\n           [3,18,33,48], [7,22,37,52], [11,26,41,56], [15,30,45,60], #68, 69, 70, 71\n           #XYZ DIRECTION\n           [0,21,42,63], [3, 22,41,60], [12, 25, 38, 51], [15, 26, 37, 48]] #72, 73, 74, 75\n\n  copy = (obj) ->\n    temp = {__proto__: obj}\n    return temp.__proto__\n\n  Function::partial = ->\n    func = @\n    originalArgs = Array::slice.call(arguments)\n    originalLength = originalArgs.length\n    return ->\n      args = []; i = 0; j = 0;\n      if not arguments.length? then return func.apply(@, Array::slice.call(originalArgs))\n      while i < originalLength\n        args.push originalArgs[i]\n        i += 1\n      return func.apply(@, args.concat(Array::slice.call(arguments, j, arguments.length)))\n\n  map = (func, array) ->\n    if array.length is 0 then return []\n    [func(array[0])].concat(map(func, array[1..]))\n\n  class Tree\n    constructor: (@node, @children) ->\n\n  class GameState\n    constructor: (@moves) ->\n\n  getLineScores = (gameState, scores = []) ->\n    winlossLevel = -1\n    for line in lines\n      score = 0\n      moveCount = 0\n      for move in gameState.moves\n        if move in line\n          if moveCount % 2 is 0\n            score--\n          else\n            score++\n        if Math.abs(score) is 4 and winlossLevel is -1\n          winlossLevel = moveCount\n        moveCount++\n      scores.push(score)\n    gameState.score = scores\n    gameState.winlossLevel = if winlossLevel is -1 then moveCount + 1 else winlossLevel\n    return gameState\n\n  countScores = (gameState, scoreCounts = {}) ->\n    for score in gameState.score\n      scoreCounts[score] = if scoreCounts[score]? then scoreCounts[score] + 1 else 1\n    gameState.score = scoreCounts\n    return gameState\n\n  getFinalScore = (gameState, score = 0) ->\n    if gameState.score['4'] > 0 then score += gameState.score['4'] * 50000000\n    if gameState.score['-4'] > 0 then score += gameState.score['-4'] * -5000000\n    if gameState.score['3'] > 0 then score += gameState.score['3'] * 500000\n    if gameState.score['-3'] > 0 then score += gameState.score['-3'] * -50000\n    if gameState.score['2'] > 0 then score += gameState.score['2'] * 5000\n    if gameState.score['-2'] > 0 then score += gameState.score['-2'] * -500\n    if gameState.score['1'] > 0 then score += gameState.score['1'] * 50\n    if gameState.score['-1'] > 0 then score += gameState.score['-1'] * -5\n    gameState.score = score / gameState.winlossLevel\n    return gameState\n\n  class GameTree\n    constructor: (usedSpaces, maxDepth) ->\n      getFreeSpaces = (usedSpaces, freeSpaces) ->\n        return (space for space in freeSpaces when space not in usedSpaces)\n\n      getPly = (usedSpaces, freeSpaces) ->\n        if freeSpaces.length > 0 then return [new GameState(usedSpaces.concat([freeSpaces[0]]))].concat(getPly(usedSpaces, freeSpaces[1..]))\n        else []\n\n      getNextBranch = (position, branch, tree) ->\n        nextBranch = copy(branch)\n        currentDepth = position.current\n        parentDepth = currentDepth - 1\n        if currentDepth < maxDepth\n          nextBranch[currentDepth] = tree\n          nextBranch = nextBranch[0..currentDepth]\n        return nextBranch\n\n      getNextTree = (position, branch, tree, freeSpaces) ->\n        currentDepth = position.current\n        parentDepth = currentDepth - 1\n        currentVariation = position[currentDepth]\n        nextNode = branch[parentDepth].children[currentVariation]\n        if currentDepth < maxDepth then return new Tree(nextNode, getPly(nextNode.moves, getFreeSpaces(nextNode.moves, freeSpaces)))\n        else return new Tree(getFinalScore(countScores(getLineScores(nextNode))), [])\n\n      getNextPosition = (position) ->\n        nextPosition = copy(position)\n        currentDepth = position.current\n        if position[currentDepth] < (freeSpaces.length - currentDepth) and currentDepth is maxDepth\n          nextPosition[currentDepth] = position[currentDepth] + 1\n          return nextPosition\n        endOfRow = -> return (position[currentDepth] is (freeSpaces.length - currentDepth) and (currentDepth is maxDepth or position[currentDepth + 1] is (freeSpaces.length - currentDepth - 1)))\n        if endOfRow()\n          currentDepth -= 1\n          while endOfRow()\n            currentDepth -= 1\n          if currentDepth <= 0\n            return false\n          nextPosition[currentDepth] += 1\n          nextPosition[i] = undefined for i in [currentDepth + 1..maxDepth] when nextPosition[i]?\n          nextPosition.current = currentDepth\n          return nextPosition\n        if currentDepth < maxDepth\n          currentDepth += 1\n          nextPosition[currentDepth] = 0\n          nextPosition.current = currentDepth\n          return nextPosition\n        return false\n      freeSpaces = (p for p in [0..63] when p not in usedSpaces)\n      maxDepth = Math.min(maxDepth, N - (usedSpaces.length))\n\n      getTree = ->\n        self = arguments.callee\n        currentPosition = self.nextPosition\n        currentBranch = self.nextBranch\n        currentTree = self.nextTree\n        self.nextPosition = getNextPosition(currentPosition)\n        if self.nextPosition isnt false\n          self.nextTree = getNextTree(self.nextPosition, currentBranch, currentTree, freeSpaces)\n          self.nextBranch = getNextBranch(self.nextPosition, currentBranch, self.nextTree)\n        return currentTree\n\n      getTree.nextTree = new Tree(new GameState(usedSpaces), getPly(usedSpaces, freeSpaces))\n      getTree.nextBranch = [getTree.nextTree]\n      getTree.nextPosition = current: 0, '0': 0\n      return getTree\n\n  max = (gameStates) ->\n    if gameStates.length is 0 then return null\n    if gameStates.length is 1 then return gameStates[0]\n    maxScoring = gameStates[0]\n    maxScoring = state for state in gameStates[1..] when state.score > maxScoring.score\n    maxScoring\n\n  min = (gameStates) ->\n    if gameStates.length is 0 then return null\n    if gameStates.length is 1 then return gameStates[0]\n    minScoring = gameStates[0]\n    minScoring = state for state in gameStates[1..] when state.score < minScoring.score\n    minScoring\n\n  maximise = (gameTree) ->\n    ct = gameTree()\n    if ct.children.length is 0 then return [ct.node]\n    mapmin(map(minimise.partial(gameTree), ct.children))\n\n  minimise = (gameTree) ->\n    ct = gameTree()\n    if ct.children.length is 0 then return [ct.node]\n    mapmax(map(maximise.partial(gameTree), ct.children))\n\n  mapmin = (minimised) ->\n    potential = min(minimised[0])\n    return [potential].concat(omitSmaller(potential, minimised[1..]))\n\n  mapmax = (maximised) ->\n    potential = max(maximised[0])\n    return [potential].concat(omitLarger(potential, maximised[1..]))\n\n  omitLarger = (potential, values) ->\n    if values.length is 0 then return []\n    if maxgt(potential, values[0]) then return omitLarger(potential, values[1..])\n    newMinMax = max(values[0])\n    return [newMinMax].concat(omitLarger(newMinMax, values[1..]))\n\n  omitSmaller = (potential, values) ->\n    if values.length is 0 then return []\n    if minleq(potential, values[0]) then return omitSmaller(potential, values[1..])\n    newMaxMin = min(values[0])\n    return [newMaxMin].concat(omitSmaller(newMaxMin, values[1..]))\n\n  maxgt = (potential, values) ->\n    if values.length is 0 then return false\n    if values[0].score > potential.score then return true\n    return maxgt(potential, values[1..])\n\n  minleq = (potential, values) ->\n    if values.length is 0 then return false\n    if values[0].score <= potential.score then return true\n    return minleq(potential, values[1..])\n\n\n  containsLine = (moves, line) ->\n    if line.length is 0\n      return true\n    if line[0] in moves\n      return containsLine(moves, line[1..])\n    else return false\n\n  checkWin = (moves) ->\n    for line in lines\n      if containsLine(moves, line) then return line\n    return false\n\n  checkWinLoseDraw = (moves) ->\n    p1 = []\n    p2 = []\n    moveCount = 0\n    for move in moves\n      if moveCount % 2 is 0 then p1.push(move)\n      else p2.push(move)\n      moveCount++\n    p1line = checkWin(p1)\n    if p1line isnt false then return [1, p1line]\n    p2line = checkWin(p2)\n    if p2line isnt false then return [-1, p2line]\n    if moves.length is 64 then return [0, null]\n    else return [2, null]\n\n  checkEnd = (moves) ->\n    if moves.length >= 7\n      [winLoseDraw, line] = checkWinLoseDraw(moves)\n      if winLoseDraw is 1 then return [moves, line]\n      if winLoseDraw is -1 then return [moves, line]\n      if winLoseDraw is 0 then return [moves, null]\n    return [moves, null]\n\n  userTurn = (moves, usermove) ->\n    if not (usermove in moves)\n      moves.push(usermove)\n      [moves, line] = checkEnd(moves)\n      if line isnt null then return [moves, line, usermove]\n    else\n      throw new Error 'Position already taken'\n    return [moves, null, usermove]\n\n  depth = 2\n  computerTurn = (moves) ->\n    if moves.length is 23 then depth is 3\n    if moves.length is 43 then depth is 4\n    if moves.length is 53 then depth is 7\n    if moves.length is 63 then depth is 1\n    moves.push(max(maximise(new GameTree(moves, depth))).moves[moves.length])\n    computermove = moves[moves.length - 1]\n    [moves, line] = checkEnd(moves)\n    if line isnt null then return [moves, line, computermove]\n    return [moves, null, computermove]\n\n  { userTurn, computerTurn }\n"]}